import React from 'react'
import Head from 'next/head'
import { signIn, useSession, getSession } from 'next-auth/client'
import { SpScreen } from '@/components/sp/screens'
import { useUserAgent } from '@/contexts/userAgent/useUserAgent'
import { UserEntity, WeightEntity } from '@/entities'
import { UserRepository, WeightRepository } from '@/repositories'
import { UserWeightContextProvider } from '@/contexts/weight/weightProvider'

type Props = {
  user: UserEntity
  weights: Array<WeightEntity>
}

export async function getServerSideProps(context) {
  try {
    const session = await getSession(context)
    const userId = session.userId as number
    /** API */
    const user = await UserRepository.fetchUser(userId)
    /** TODO: when user cannot get */
    const weights = await WeightRepository.fetchWeights(user.id)

    return {
      props: {
        user,
        weights,
      },
    }
  } catch (error) {
    console.error(error)
  }
}

export default function Home(props: Props) {
  const [session, loading] = useSession()
  const userDevice = useUserAgent()
  // TODO: when data missing, show error page

  return (
    <>
      {!session && (
        <>
          {loading ? (
            <>Loading ...</>
          ) : (
            <>
              Not signed in <br />
              <button onClick={() => signIn()}>Sign in</button>
            </>
          )}
        </>
      )}
      {session && (
        <>
          <Head>
            <title>My Weight Checker</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>

          <UserWeightContextProvider user={props.user} weights={props.weights}>
            {userDevice.isMobile ? (
              <SpScreen />
            ) : (
              <p>Under Construction for PC</p>
              // <PcContent />
            )}
          </UserWeightContextProvider>
        </>
      )}
    </>
  )
}
