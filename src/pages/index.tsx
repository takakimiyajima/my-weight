import React from 'react'
import { GetServerSidePropsContext } from 'next'
import Head from 'next/head'
import { getSession } from 'next-auth/client'
import { SpScreen } from '@/components/sp/screens'
import { useUserAgent } from '@/contexts/userAgent/useUserAgent'
import { UserEntity, WeightEntity } from '@/entities'
import { UserRepository, WeightRepository } from '@/repositories'
import { UserWeightContextProvider } from '@/contexts/weight/weightProvider'

type Props = {
  user: UserEntity
  weights: Array<WeightEntity>
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  try {
    const session = await getSession(context)
    if (!session) {
      return { props: {} }
    }

    const userId = session.userId as number
    /** API */
    const user = await UserRepository.fetchUser(userId)
    if (!user) {
      return { props: {} }
    }

    /** TODO: when user cannot get */
    const weights = user ? await WeightRepository.fetchWeights(user.id) : []

    return {
      props: {
        user,
        weights,
      },
    }
  } catch (error) {
    console.error(error)
  }
}

export default function Home(props: Props) {
  const userDevice = useUserAgent()
  // TODO: when data missing, show error page

  return (
    <>
      <Head>
        <title>My Weight Checker</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <UserWeightContextProvider user={props.user} weights={props.weights}>
        {userDevice.isMobile ? (
          <SpScreen />
        ) : (
          <p>Under Construction for PC</p>
          // <PcScreen />
        )}
      </UserWeightContextProvider>
    </>
  )
}
